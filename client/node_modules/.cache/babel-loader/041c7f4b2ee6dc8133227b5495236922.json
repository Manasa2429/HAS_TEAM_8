{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/AdminDeleteRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Popconfirm, message } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AdminDeleteRoom() {\n  _s();\n\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\"); // Fetch rooms on component mount\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await axios.get(\"/api/rooms\");\n        setRooms(data);\n      } catch (err) {\n        var _err$response, _err$response$data;\n\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRooms();\n  }, []); // Delete a room by ID\n\n  const deleteRoom = async roomId => {\n    setLoading(true);\n\n    try {\n      await axios.delete(`/api/rooms/delete/${roomId}`);\n      message.success(\"Room deleted successfully!\");\n      setRooms(rooms.filter(room => room._id !== roomId)); // Remove deleted room from state\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n\n      message.error(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Failed to delete room\");\n    } finally {\n      setLoading(false);\n    }\n  }; // Table columns\n\n\n  const columns = [{\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"Type\",\n    dataIndex: \"type\",\n    key: \"type\"\n  }, {\n    title: \"Rent Per Day\",\n    dataIndex: \"rentperday\",\n    key: \"rentperday\"\n  }, {\n    title: \"Max Count\",\n    dataIndex: \"maxcount\",\n    key: \"maxcount\"\n  }, {\n    title: \"Action\",\n    key: \"action\",\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Popconfirm, {\n      title: \"Are you sure you want to delete this room?\",\n      onConfirm: () => deleteRoom(record._id),\n      okText: \"Yes\",\n      cancelText: \"No\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"danger\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Room List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: rooms,\n      rowKey: \"_id\",\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AdminDeleteRoom, \"3BDu/JKTQYQ5PJvE4g+RRiyk9EU=\");\n\n_c = AdminDeleteRoom;\nexport default AdminDeleteRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminDeleteRoom\");","map":{"version":3,"sources":["/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/AdminDeleteRoom.js"],"names":["React","useState","useEffect","axios","Table","Button","Popconfirm","message","AdminDeleteRoom","rooms","setRooms","loading","setLoading","error","setError","fetchRooms","data","get","err","response","deleteRoom","roomId","delete","success","filter","room","_id","columns","title","dataIndex","key","render","text","record","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Popconfirm, message } from \"antd\";\n\nfunction AdminDeleteRoom() {\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Fetch rooms on component mount\n  useEffect(() => {\n    const fetchRooms = async () => {\n      setLoading(true);\n      try {\n        const { data } = await axios.get(\"/api/rooms\");\n        setRooms(data);\n      } catch (err) {\n        setError(err.response?.data?.message || err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRooms();\n  }, []);\n\n  // Delete a room by ID\n  const deleteRoom = async (roomId) => {\n    setLoading(true);\n    try {\n      await axios.delete(`/api/rooms/delete/${roomId}`);\n      message.success(\"Room deleted successfully!\");\n      setRooms(rooms.filter((room) => room._id !== roomId)); // Remove deleted room from state\n    } catch (err) {\n      message.error(err.response?.data?.message || \"Failed to delete room\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Table columns\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n    },\n    {\n      title: \"Rent Per Day\",\n      dataIndex: \"rentperday\",\n      key: \"rentperday\",\n    },\n    {\n      title: \"Max Count\",\n      dataIndex: \"maxcount\",\n      key: \"maxcount\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text, record) => (\n        <Popconfirm\n          title=\"Are you sure you want to delete this room?\"\n          onConfirm={() => deleteRoom(record._id)}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <Button type=\"danger\">Delete</Button>\n        </Popconfirm>\n      ),\n    },\n  ];\n\nreturn (\n  <div>\n    <h2>Room List</h2>\n    {error && <p style={{ color: \"red\" }}>{error}</p>}\n    <Table\n      columns={columns}\n      dataSource={rooms}\n      rowKey=\"_id\"\n      loading={loading}\n    />\n  </div>\n);\n}\n\nexport default AdminDeleteRoom;\n"]},"metadata":{},"sourceType":"module"}