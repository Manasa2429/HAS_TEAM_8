{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/FoodMenuScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Row, Col, Button, Modal, notification, Form, Input } from \"antd\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FoodMenuScreen() {\n  _s();\n\n  const [foodItems, setFoodItems] = useState([]);\n  const [selectedFood, setSelectedFood] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\n  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);\n  const [addForm] = Form.useForm(); // Form instance for Add Food Item\n\n  useEffect(() => {\n    fetchFoodItems();\n  }, []);\n\n  const fetchFoodItems = async () => {\n    try {\n      const response = await axios.get('/api/food-items');\n      setFoodItems(response.data);\n    } catch (error) {\n      notification.error({\n        message: \"Failed to fetch food items\",\n        description: error.message\n      });\n    }\n  };\n\n  const handleAddFoodItem = async values => {\n    try {\n      const response = await axios.post('/api/food-items', values);\n      setFoodItems([...foodItems, response.data]);\n      setIsAddModalVisible(false);\n      notification.success({\n        message: \"Food Item Added\",\n        description: `${values.name} has been added to the menu.`\n      });\n    } catch (error) {\n      notification.error({\n        message: \"Failed to add food item\",\n        description: error.message\n      });\n    }\n  };\n\n  const handleEditFoodItem = async values => {\n    try {\n      const response = await axios.put(`/api/food-items/${selectedFood._id}`, values);\n      const updatedItems = foodItems.map(item => item._id === selectedFood._id ? response.data : item);\n      setFoodItems(updatedItems);\n      setIsEditModalVisible(false);\n      notification.success({\n        message: \"Food Item Updated\",\n        description: `${values.name} has been updated.`\n      });\n    } catch (error) {\n      notification.error({\n        message: \"Failed to update food item\",\n        description: error.message\n      });\n    }\n  };\n\n  const handleDeleteFoodItem = async () => {\n    try {\n      await axios.delete(`/api/food-items/${selectedFood._id}`);\n      const updatedItems = foodItems.filter(item => item._id !== selectedFood._id);\n      setFoodItems(updatedItems);\n      setIsDeleteModalVisible(false);\n      notification.success({\n        message: \"Food Item Deleted\",\n        description: `${selectedFood.name} has been deleted from the menu.`\n      });\n    } catch (error) {\n      notification.error({\n        message: \"Failed to delete food item\",\n        description: error.message\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-3 mt-3 mr-3 bs\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Food Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3 text-right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => {\n          addForm.resetFields(); // Clear fields when opening modal\n\n          setIsAddModalVisible(true);\n        },\n        children: \"Add Menu Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      gutter: [16, 16],\n      children: foodItems.map(food => /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 12,\n        md: 8,\n        lg: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: food.name,\n          cover: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: food.name,\n            src: food.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 36\n          }, this),\n          bordered: true,\n          extra: `$${food.price}`,\n          actions: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            onClick: () => {\n              setSelectedFood(food);\n              setIsEditModalVisible(true);\n            },\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"danger\",\n            onClick: () => {\n              setSelectedFood(food);\n              setIsDeleteModalVisible(true);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            onClick: () => {\n              setSelectedFood(food);\n              setIsModalVisible(true);\n            },\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this)],\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: food.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, food._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Add New Food Item\",\n      visible: isAddModalVisible,\n      onCancel: () => setIsAddModalVisible(false),\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: addForm,\n        layout: \"vertical\",\n        onFinish: handleAddFoodItem,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Name\",\n          name: \"name\",\n          rules: [{\n            required: true,\n            message: \"Please enter the food name\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter food name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Price\",\n          name: \"price\",\n          rules: [{\n            required: true,\n            message: \"Please enter the price\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"number\",\n            placeholder: \"Enter price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Description\",\n          name: \"description\",\n          rules: [{\n            required: true,\n            message: \"Please enter a description\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Image URL\",\n          name: \"image\",\n          rules: [{\n            required: true,\n            message: \"Please enter the image URL\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter image URL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Add Food Item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FoodMenuScreen, \"P++e4nrI6JiSxeWEzV4FflodBoA=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = FoodMenuScreen;\nexport default FoodMenuScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodMenuScreen\");","map":{"version":3,"sources":["/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/FoodMenuScreen.js"],"names":["React","useState","useEffect","Card","Row","Col","Button","Modal","notification","Form","Input","axios","FoodMenuScreen","foodItems","setFoodItems","selectedFood","setSelectedFood","isModalVisible","setIsModalVisible","isAddModalVisible","setIsAddModalVisible","isEditModalVisible","setIsEditModalVisible","isDeleteModalVisible","setIsDeleteModalVisible","addForm","useForm","fetchFoodItems","response","get","data","error","message","description","handleAddFoodItem","values","post","success","name","handleEditFoodItem","put","_id","updatedItems","map","item","handleDeleteFoodItem","delete","filter","resetFields","food","image","price","required"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, Row, Col, Button, Modal, notification, Form, Input } from \"antd\";\nimport axios from \"axios\";\n\nfunction FoodMenuScreen() {\n    const [foodItems, setFoodItems] = useState([]);\n    const [selectedFood, setSelectedFood] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n    const [isEditModalVisible, setIsEditModalVisible] = useState(false);\n    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);\n    const [addForm] = Form.useForm(); // Form instance for Add Food Item\n\n    useEffect(() => {\n        fetchFoodItems();\n    }, []);\n\n    const fetchFoodItems = async () => {\n        try {\n            const response = await axios.get('/api/food-items');\n            setFoodItems(response.data);\n        } catch (error) {\n            notification.error({\n                message: \"Failed to fetch food items\",\n                description: error.message,\n            });\n        }\n    };\n\n    const handleAddFoodItem = async (values) => {\n        try {\n            const response = await axios.post('/api/food-items', values);\n            setFoodItems([...foodItems, response.data]);\n            setIsAddModalVisible(false);\n            notification.success({\n                message: \"Food Item Added\",\n                description: `${values.name} has been added to the menu.`,\n            });\n        } catch (error) {\n            notification.error({\n                message: \"Failed to add food item\",\n                description: error.message,\n            });\n        }\n    };\n\n    const handleEditFoodItem = async (values) => {\n        try {\n            const response = await axios.put(`/api/food-items/${selectedFood._id}`, values);\n            const updatedItems = foodItems.map((item) =>\n                item._id === selectedFood._id ? response.data : item\n            );\n            setFoodItems(updatedItems);\n            setIsEditModalVisible(false);\n            notification.success({\n                message: \"Food Item Updated\",\n                description: `${values.name} has been updated.`,\n            });\n        } catch (error) {\n            notification.error({\n                message: \"Failed to update food item\",\n                description: error.message,\n            });\n        }\n    };\n\n    const handleDeleteFoodItem = async () => {\n        try {\n            await axios.delete(`/api/food-items/${selectedFood._id}`);\n            const updatedItems = foodItems.filter((item) => item._id !== selectedFood._id);\n            setFoodItems(updatedItems);\n            setIsDeleteModalVisible(false);\n            notification.success({\n                message: \"Food Item Deleted\",\n                description: `${selectedFood.name} has been deleted from the menu.`,\n            });\n        } catch (error) {\n            notification.error({\n                message: \"Failed to delete food item\",\n                description: error.message,\n            });\n        }\n    };\n\n    return (\n        <div className=\"ml-3 mt-3 mr-3 bs\">\n            <h1 className=\"text-center\">Food Menu</h1>\n            <div className=\"mb-3 text-right\">\n                <Button\n                    type=\"primary\"\n                    onClick={() => {\n                        addForm.resetFields(); // Clear fields when opening modal\n                        setIsAddModalVisible(true);\n                    }}\n                >\n                    Add Menu Item\n                </Button>\n            </div>\n            <Row gutter={[16, 16]}>\n                {foodItems.map((food) => (\n                    <Col key={food._id} xs={24} sm={12} md={8} lg={6}>\n                        <Card\n                            title={food.name}\n                            cover={<img alt={food.name} src={food.image} />}\n                            bordered={true}\n                            extra={`$${food.price}`}\n                            actions={[\n                                <Button type=\"primary\" onClick={() => { setSelectedFood(food); setIsEditModalVisible(true); }}>\n                                    Edit\n                                </Button>,\n                                <Button type=\"danger\" onClick={() => { setSelectedFood(food); setIsDeleteModalVisible(true); }}>\n                                    Delete\n                                </Button>,\n                                <Button type=\"primary\" onClick={() => {\n                                    setSelectedFood(food);\n                                    setIsModalVisible(true);\n                                }}>\n                                    View Details\n                                </Button>,\n                            ]}\n                        >\n                            <p>{food.description}</p>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n\n            {/* Add New Food Item Modal */}\n            <Modal\n                title=\"Add New Food Item\"\n                visible={isAddModalVisible}\n                onCancel={() => setIsAddModalVisible(false)}\n                footer={null}\n            >\n                <Form form={addForm} layout=\"vertical\" onFinish={handleAddFoodItem}>\n                    <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: \"Please enter the food name\" }]}>\n                        <Input placeholder=\"Enter food name\" />\n                    </Form.Item>\n                    <Form.Item label=\"Price\" name=\"price\" rules={[{ required: true, message: \"Please enter the price\" }]}>\n                        <Input type=\"number\" placeholder=\"Enter price\" />\n                    </Form.Item>\n                    <Form.Item label=\"Description\" name=\"description\" rules={[{ required: true, message: \"Please enter a description\" }]}>\n                        <Input placeholder=\"Enter description\" />\n                    </Form.Item>\n                    <Form.Item label=\"Image URL\" name=\"image\" rules={[{ required: true, message: \"Please enter the image URL\" }]}>\n                        <Input placeholder=\"Enter image URL\" />\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Add Food Item\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n    );\n}\n\nexport default FoodMenuScreen;\n"]},"metadata":{},"sourceType":"module"}