{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/FoodOrderDetails.js\";\n\n/*import React, { useState, useEffect } from \"react\";\nimport { Table, Button, Modal, Form, InputNumber, Select, notification } from \"antd\";\n\nconst { Option } = Select;\n\nfunction FoodOrdersScreen() {\n  const user = JSON.parse(localStorage.getItem(\"currentUser\"));\n  const [foodItems, setFoodItems] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedFood, setSelectedFood] = useState(null);\n  const [quantity, setQuantity] = useState(1);\n\n  useEffect(() => {\n    if (!user) {\n      window.location.href = \"/home\";\n    }\n    fetchFoodItems();\n  }, []);\n\n  const fetchFoodItems = () => {\n    // Simulate fetching food items from an API\n    const fetchedItems = [\n      { key: 1, name: \"Pizza\", price: 10 },\n      { key: 2, name: \"Burger\", price: 5 },\n      { key: 3, name: \"Pasta\", price: 7 },\n    ];\n    setFoodItems(fetchedItems);\n  };\n\n  const handleAddToCart = () => {\n    if (!selectedFood) {\n      notification.error({\n        message: \"Error\",\n        description: \"Please select a food item.\"\n      });\n      return;\n    }\n    const existingItem = cart.find((item) => item.key === selectedFood.key);\n    if (existingItem) {\n      setCart(\n        cart.map((item) =>\n          item.key === selectedFood.key\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        )\n      );\n    } else {\n      setCart([...cart, { ...selectedFood, quantity }]);\n    }\n    setIsModalVisible(false);\n    setQuantity(1);\n    notification.success({\n      message: \"Added to Cart\",\n      description: `${selectedFood.name} has been added to your cart.`\n    });\n  };\n\n  const handleRemoveFromCart = (key) => {\n    setCart(cart.filter((item) => item.key !== key));\n  };\n\n  const calculateTotal = () => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2);\n  };\n\n  return (\n    <div className=\"ml-3 mt-3 mr-3 bs\">\n      <h1 className=\"text-center\">Food Order Screen</h1>\n\n      <div className=\"mb-3 text-right\">\n        <Button type=\"primary\" onClick={() => setIsModalVisible(true)}>\n          Add Food to Cart\n        </Button>\n      </div>\n\n      <Table\n        dataSource={cart}\n        columns={[\n          { title: \"Name\", dataIndex: \"name\", key: \"name\" },\n          { title: \"Price\", dataIndex: \"price\", key: \"price\", render: (price) => `$${price}` },\n          { title: \"Quantity\", dataIndex: \"quantity\", key: \"quantity\" },\n          {\n            title: \"Total\",\n            key: \"total\",\n            render: (text, record) => `$${(record.price * record.quantity).toFixed(2)}`,\n          },\n          {\n            title: \"Actions\",\n            key: \"actions\",\n            render: (text, record) => (\n              <Button type=\"danger\" onClick={() => handleRemoveFromCart(record.key)}>\n                Remove\n              </Button>\n            ),\n          },\n        ]}\n      />\n\n      <h3 className=\"text-right\">Total: ${calculateTotal()}</h3>\n\n      <Modal\n        title=\"Add Food to Cart\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        onOk={handleAddToCart}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Food Item\">\n            <Select\n              placeholder=\"Select a food item\"\n              onChange={(key) => setSelectedFood(foodItems.find((item) => item.key === key))}\n            >\n              {foodItems.map((item) => (\n                <Option key={item.key} value={item.key}>\n                  {item.name} - ${item.price}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Quantity\">\n            <InputNumber\n              min={1}\n              value={quantity}\n              onChange={(value) => setQuantity(value)}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default FoodOrdersScreen;*/\nimport React from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FoodOrderDetails({\n  orders,\n  isVisible,\n  onClose\n}) {\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Your Orders\",\n    visible: isVisible,\n    onCancel: onClose,\n    footer: null,\n    children: [orders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No items in your cart yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this) : orders.map((order, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: order.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 16\n        }, this), \" - $\", order.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: order.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FoodOrderDetails;\nexport default FoodOrderDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodOrderDetails\");","map":{"version":3,"sources":["/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/FoodOrderDetails.js"],"names":["React","Modal","Button","FoodOrderDetails","orders","isVisible","onClose","length","map","order","index","name","price","description"],"mappingskB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA;AAArB,CAA1B,EAA0D;AACxD,sBACE,QAAC,KAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,OAAO,EAAED,SAFX;AAGE,IAAA,QAAQ,EAAEC,OAHZ;AAIE,IAAA,MAAM,EAAE,IAJV;AAAA,eAMGF,MAAM,CAACG,MAAP,KAAkB,CAAlB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAGCH,MAAM,CAACI,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,kBACT;AAAA,8BACE;AAAA,gCAAG;AAAA,oBAASD,KAAK,CAACE;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAH,UAAqCF,KAAK,CAACG,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAIH,KAAK,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,OAAUH,KAAV;AAAA;AAAA;AAAA;AAAA,YADF,CATJ,eAiBE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAEJ,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;KAxBQH,gB;AA0BT,eAAeA,gBAAf","sourcesContent":["/*import React, { useState, useEffect } from \"react\";\nimport { Table, Button, Modal, Form, InputNumber, Select, notification } from \"antd\";\n\nconst { Option } = Select;\n\nfunction FoodOrdersScreen() {\n  const user = JSON.parse(localStorage.getItem(\"currentUser\"));\n  const [foodItems, setFoodItems] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedFood, setSelectedFood] = useState(null);\n  const [quantity, setQuantity] = useState(1);\n\n  useEffect(() => {\n    if (!user) {\n      window.location.href = \"/home\";\n    }\n    fetchFoodItems();\n  }, []);\n\n  const fetchFoodItems = () => {\n    // Simulate fetching food items from an API\n    const fetchedItems = [\n      { key: 1, name: \"Pizza\", price: 10 },\n      { key: 2, name: \"Burger\", price: 5 },\n      { key: 3, name: \"Pasta\", price: 7 },\n    ];\n    setFoodItems(fetchedItems);\n  };\n\n  const handleAddToCart = () => {\n    if (!selectedFood) {\n      notification.error({\n        message: \"Error\",\n        description: \"Please select a food item.\"\n      });\n      return;\n    }\n    const existingItem = cart.find((item) => item.key === selectedFood.key);\n    if (existingItem) {\n      setCart(\n        cart.map((item) =>\n          item.key === selectedFood.key\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        )\n      );\n    } else {\n      setCart([...cart, { ...selectedFood, quantity }]);\n    }\n    setIsModalVisible(false);\n    setQuantity(1);\n    notification.success({\n      message: \"Added to Cart\",\n      description: `${selectedFood.name} has been added to your cart.`\n    });\n  };\n\n  const handleRemoveFromCart = (key) => {\n    setCart(cart.filter((item) => item.key !== key));\n  };\n\n  const calculateTotal = () => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2);\n  };\n\n  return (\n    <div className=\"ml-3 mt-3 mr-3 bs\">\n      <h1 className=\"text-center\">Food Order Screen</h1>\n\n      <div className=\"mb-3 text-right\">\n        <Button type=\"primary\" onClick={() => setIsModalVisible(true)}>\n          Add Food to Cart\n        </Button>\n      </div>\n\n      <Table\n        dataSource={cart}\n        columns={[\n          { title: \"Name\", dataIndex: \"name\", key: \"name\" },\n          { title: \"Price\", dataIndex: \"price\", key: \"price\", render: (price) => `$${price}` },\n          { title: \"Quantity\", dataIndex: \"quantity\", key: \"quantity\" },\n          {\n            title: \"Total\",\n            key: \"total\",\n            render: (text, record) => `$${(record.price * record.quantity).toFixed(2)}`,\n          },\n          {\n            title: \"Actions\",\n            key: \"actions\",\n            render: (text, record) => (\n              <Button type=\"danger\" onClick={() => handleRemoveFromCart(record.key)}>\n                Remove\n              </Button>\n            ),\n          },\n        ]}\n      />\n\n      <h3 className=\"text-right\">Total: ${calculateTotal()}</h3>\n\n      <Modal\n        title=\"Add Food to Cart\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        onOk={handleAddToCart}\n      >\n        <Form layout=\"vertical\">\n          <Form.Item label=\"Food Item\">\n            <Select\n              placeholder=\"Select a food item\"\n              onChange={(key) => setSelectedFood(foodItems.find((item) => item.key === key))}\n            >\n              {foodItems.map((item) => (\n                <Option key={item.key} value={item.key}>\n                  {item.name} - ${item.price}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Quantity\">\n            <InputNumber\n              min={1}\n              value={quantity}\n              onChange={(value) => setQuantity(value)}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default FoodOrdersScreen;*/\nimport React from \"react\";\nimport { Modal, Button } from \"antd\";\n\nfunction FoodOrderDetails({ orders, isVisible, onClose }) {\n  return (\n    <Modal\n      title=\"Your Orders\"\n      visible={isVisible}\n      onCancel={onClose}\n      footer={null}\n    >\n      {orders.length === 0 ? (\n        <p>No items in your cart yet.</p>\n      ) : (\n        orders.map((order, index) => (\n          <div key={index}>\n            <p><strong>{order.name}</strong> - ${order.price}</p>\n            <p>{order.description}</p>\n            <hr />\n          </div>\n        ))\n      )}\n      <Button type=\"primary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n}\n\nexport default FoodOrderDetails;"]},"metadata":{},"sourceType":"module"}