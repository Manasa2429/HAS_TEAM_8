{"ast":null,"code":"var _jsxFileName = \"/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/AdminUserScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Tag, Button } from \"antd\";\nimport Loader from \"../components/Loader\";\nimport Error from \"../components/Error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AdminUserScreen() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const columns = [{\n    title: \"User ID\",\n    dataIndex: \"_id\",\n    key: \"_id\"\n  }, {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\"\n  }, {\n    title: \"Admin Status\",\n    dataIndex: \"isAdmin\",\n    key: \"isAdmin\",\n    render: (isAdmin, user) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isAdmin ? /*#__PURE__*/_jsxDEV(Tag, {\n        color: \"green\",\n        children: \"YES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Tag, {\n          color: \"red\",\n          children: \"NO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"link\",\n          onClick: () => makeAdmin(user._id),\n          style: {\n            padding: 0,\n            border: \"none\",\n            color: \"#1890ff\"\n          },\n          children: \"Make Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)\n  }];\n\n  async function fetchMyData() {\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      const data = (await axios.post(\"/api/users/getallusers\")).data;\n      setUsers(data);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchMyData();\n  }, []);\n\n  const makeAdmin = async userId => {\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      await axios.post(`/api/users/makeAdmin/${userId}`);\n      fetchMyData(); // Refresh the user list after making a user admin\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    }\n\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Error, {\n      msg: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-12\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: users,\n        rowKey: \"_id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AdminUserScreen, \"ti6iAh9YWw9PPSvUKlmYPkl4k8Q=\");\n\n_c = AdminUserScreen;\nexport default AdminUserScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminUserScreen\");","map":{"version":3,"sources":["/home/apiiit123/Documents/vscode/Team-8-main/client/src/screens/AdminUserScreen.js"],"names":["React","useState","useEffect","axios","Table","Tag","Button","Loader","Error","AdminUserScreen","users","setUsers","loading","setLoading","error","setError","columns","title","dataIndex","key","render","isAdmin","user","makeAdmin","_id","padding","border","color","fetchMyData","data","post","console","log","message","userId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Tag, Button } from \"antd\";\n\nimport Loader from \"../components/Loader\";\nimport Error from \"../components/Error\";\n\nfunction AdminUserScreen() {\n\tconst [users, setUsers] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst [error, setError] = useState(\"\");\n\n\tconst columns = [\n\t\t{ title: \"User ID\", dataIndex: \"_id\", key: \"_id\" },\n\t\t{\n\t\t\ttitle: \"Name\",\n\t\t\tdataIndex: \"name\",\n\t\t\tkey: \"name\",\n\t\t},\n\t\t{ title: \"Email\", dataIndex: \"email\", key: \"email\" },\n\n\t\t{\n\t\t\ttitle: \"Admin Status\",\n\t\t\tdataIndex: \"isAdmin\",\n\t\t\tkey: \"isAdmin\",\n\t\t\trender: (isAdmin, user) => (\n\t\t\t\t<>\n\t\t\t\t\t{isAdmin ? (\n\t\t\t\t\t\t<Tag color=\"green\">YES</Tag>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Tag color=\"red\">NO</Tag>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\t\t\tonClick={() => makeAdmin(user._id)}\n\t\t\t\t\t\t\t\tstyle={{ padding: 0, border: \"none\", color: \"#1890ff\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMake Admin\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t),\n\t\t},\n\t];\n\n\tasync function fetchMyData() {\n\t\tsetError(\"\");\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tconst data = (await axios.post(\"/api/users/getallusers\")).data;\n\t\t\tsetUsers(data);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tsetError(error.message);\n\t\t}\n\t\tsetLoading(false);\n\t}\n\n\tuseEffect(() => {\n\t\tfetchMyData();\n\t}, []);\n\n\tconst makeAdmin = async (userId) => {\n\t\tsetError(\"\");\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tawait axios.post(`/api/users/makeAdmin/${userId}`, );\n\t\t\tfetchMyData(); // Refresh the user list after making a user admin\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tsetError(error.message);\n\t\t}\n\t\tsetLoading(false);\n\t};\n\n\treturn (\n\t\t<div className=\"row\">\n\t\t\t{loading ? (\n\t\t\t\t<Loader />\n\t\t\t) : error ? (\n\t\t\t\t<Error msg={error} />\n\t\t\t) : (\n\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t<Table columns={columns} dataSource={users} rowKey=\"_id\" />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default AdminUserScreen;\n"]},"metadata":{},"sourceType":"module"}